{"ast":null,"code":"\"use strict\";\n\nconst axios = require(\"axios\");\nconst apiBaseUrl = require(\"./apiBaseUrl\").baseUrl;\nconst resultRendering = require(\"./resultRendering.js\");\nlet isBrowserEnv = typeof window !== 'undefined';\nconst globalObject = isBrowserEnv ? window : global;\nlet formData;\nif (typeof window !== 'undefined' && window.FormData) {\n  // We're in a browser environment\n  formData = window.FormData;\n} else {\n  // We're in a node environment\n  try {\n    formData = require(\"form-data\");\n  } catch (error) {\n    console.error(\"Error requiring form-data:\", error);\n    // Handle the error or set a default value for formData\n  }\n}\n\n/**\n * Create a new instance of DeepAI\n *\n */\n\nfunction DeepAI(customAxiosInstance) {\n  if (customAxiosInstance) {\n    this.axiosInstance = customAxiosInstance;\n  } else {\n    this.axiosInstance = axios.create({\n      headers: {\n        \"client-library\": \"deepai-js-client\"\n      }\n    });\n  }\n}\nDeepAI.prototype.setApiKey = function (apiKey) {\n  this.apiKey = apiKey;\n  this.axiosInstance.defaults.headers.common[\"api-key\"] = apiKey;\n};\nfunction urlForModel(model_name) {\n  return apiBaseUrl + \"/api/\" + model_name;\n}\nDeepAI.prototype.callStandardApi = async function request(model_name, inputs_object) {\n  const form = new formData();\n  for (let key of Object.keys(inputs_object)) {\n    const input = inputs_object[key];\n    if (!input) continue;\n    if (typeof input === \"string\") {\n      form.append(key, input);\n    } else if (isBrowserEnv && input instanceof globalObject.Element) {\n      if (input.tagName === \"IMG\") {\n        if (input.src) {\n          form.append(key, input.src);\n          // TODO: Handle data URLs and blob URLs\n        } else {\n          throw new Error(`DeepAI error: Image element has no SRC: ${key}`);\n        }\n      } else if (input.tagName === \"INPUT\" && input.files) {\n        if (input.files.length > 0) {\n          form.append(key, input.files[0], \"file.jpeg\");\n        } else {\n          throw new Error(`DeepAI error: File picker has no file picked: ${key}`);\n        }\n      } else {\n        throw new Error(`DeepAI error: DOM Element type for key: ${key}`);\n      }\n    } else if (input.hasOwnProperty(\"fd\")) {\n      form.append(key, input);\n    } else if (globalObject.Buffer && globalObject.Buffer.isBuffer(input)) {\n      form.append(key, input, \"file.jpeg\");\n    } else {\n      throw new Error(`DeepAI error: unknown input type for key: ${key}`);\n    }\n    // TODO: Ensure filenames are unique if necessary\n  }\n\n  var req_options = {\n    withCredentials: true\n  };\n  if (form.getHeaders !== undefined) {\n    // formData is the nodejs based subsitute, only needed for node.js\n    req_options.headers = form.getHeaders();\n  }\n  const response = await this.axiosInstance.post(urlForModel(model_name), form, req_options);\n  return response.data;\n};\nDeepAI.prototype.renderResultIntoElement = resultRendering.renderResultIntoElement;\nDeepAI.prototype.renderAnnotatedResultIntoElement = resultRendering.renderAnnotatedResultIntoElement;\nmodule.exports = DeepAI;","map":{"version":3,"names":["axios","require","apiBaseUrl","baseUrl","resultRendering","isBrowserEnv","window","globalObject","global","formData","FormData","error","console","DeepAI","customAxiosInstance","axiosInstance","create","headers","prototype","setApiKey","apiKey","defaults","common","urlForModel","model_name","callStandardApi","request","inputs_object","form","key","Object","keys","input","append","Element","tagName","src","Error","files","length","hasOwnProperty","Buffer","isBuffer","req_options","withCredentials","getHeaders","undefined","response","post","data","renderResultIntoElement","renderAnnotatedResultIntoElement","module","exports"],"sources":["/Users/victorzhu/Desktop/recipe-app/client/node_modules/deepai/lib/core/DeepAI.js"],"sourcesContent":["\"use strict\";\nconst axios = require(\"axios\");\n\nconst apiBaseUrl = require(\"./apiBaseUrl\").baseUrl;\n\nconst resultRendering = require(\"./resultRendering.js\");\n\nlet isBrowserEnv = typeof window !== 'undefined';\n\nconst globalObject = isBrowserEnv ? window : global;\n\n\nlet formData;\n\nif (typeof window !== 'undefined' && window.FormData) {\n    // We're in a browser environment\n    formData = window.FormData;\n} else {\n    // We're in a node environment\n    try {\n        formData = require(\"form-data\");\n    } catch (error) {\n        console.error(\"Error requiring form-data:\", error);\n        // Handle the error or set a default value for formData\n    }\n}\n\n\n/**\n * Create a new instance of DeepAI\n *\n */\n\nfunction DeepAI(customAxiosInstance) {\n  if (customAxiosInstance) {\n      this.axiosInstance = customAxiosInstance;\n  } else {\n      this.axiosInstance = axios.create({\n          headers: { \"client-library\": \"deepai-js-client\" },\n      });\n  }\n}\n\n\nDeepAI.prototype.setApiKey = function (apiKey) {\n  this.apiKey = apiKey;\n  this.axiosInstance.defaults.headers.common[\"api-key\"] = apiKey;\n};\n\nfunction urlForModel(model_name) {\n  return apiBaseUrl + \"/api/\" + model_name;\n}\n\nDeepAI.prototype.callStandardApi = async function request(model_name, inputs_object) {\n    const form = new formData();\n    for (let key of Object.keys(inputs_object)) {\n        const input = inputs_object[key];\n        if (!input) continue;\n\n        if (typeof input === \"string\") {\n            form.append(key, input);\n        } else if (isBrowserEnv && input instanceof globalObject.Element) {\n            if (input.tagName === \"IMG\") {\n                if (input.src) {\n                    form.append(key, input.src);\n                    // TODO: Handle data URLs and blob URLs\n                } else {\n                    throw new Error(`DeepAI error: Image element has no SRC: ${key}`);\n                }\n            } else if (input.tagName === \"INPUT\" && input.files) {\n                if (input.files.length > 0) {\n                    form.append(key, input.files[0], \"file.jpeg\");\n                } else {\n                    throw new Error(`DeepAI error: File picker has no file picked: ${key}`);\n                }\n            } else {\n                throw new Error(`DeepAI error: DOM Element type for key: ${key}`);\n            }\n        } else if (input.hasOwnProperty(\"fd\")) {\n            form.append(key, input);\n        } else if (globalObject.Buffer && globalObject.Buffer.isBuffer(input)) {\n            form.append(key, input, \"file.jpeg\");\n        } else {\n            throw new Error(`DeepAI error: unknown input type for key: ${key}`);\n        }\n        // TODO: Ensure filenames are unique if necessary\n    }\n\n\n\n  var req_options = {\n    withCredentials: true,\n  };\n  if (form.getHeaders !== undefined) {\n    // formData is the nodejs based subsitute, only needed for node.js\n    req_options.headers = form.getHeaders();\n  }\n  const response = await this.axiosInstance.post(\n    urlForModel(model_name),\n    form,\n    req_options\n  );\n  return response.data;\n};\n\nDeepAI.prototype.renderResultIntoElement =\n  resultRendering.renderResultIntoElement;\nDeepAI.prototype.renderAnnotatedResultIntoElement =\n  resultRendering.renderAnnotatedResultIntoElement;\n\nmodule.exports = DeepAI;\n"],"mappings":"AAAA,YAAY;;AACZ,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAO,CAAC;AAE9B,MAAMC,UAAU,GAAGD,OAAO,CAAC,cAAc,CAAC,CAACE,OAAO;AAElD,MAAMC,eAAe,GAAGH,OAAO,CAAC,sBAAsB,CAAC;AAEvD,IAAII,YAAY,GAAG,OAAOC,MAAM,KAAK,WAAW;AAEhD,MAAMC,YAAY,GAAGF,YAAY,GAAGC,MAAM,GAAGE,MAAM;AAGnD,IAAIC,QAAQ;AAEZ,IAAI,OAAOH,MAAM,KAAK,WAAW,IAAIA,MAAM,CAACI,QAAQ,EAAE;EAClD;EACAD,QAAQ,GAAGH,MAAM,CAACI,QAAQ;AAC9B,CAAC,MAAM;EACH;EACA,IAAI;IACAD,QAAQ,GAAGR,OAAO,CAAC,WAAW,CAAC;EACnC,CAAC,CAAC,OAAOU,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD;EACJ;AACJ;;AAGA;AACA;AACA;AACA;;AAEA,SAASE,MAAMA,CAACC,mBAAmB,EAAE;EACnC,IAAIA,mBAAmB,EAAE;IACrB,IAAI,CAACC,aAAa,GAAGD,mBAAmB;EAC5C,CAAC,MAAM;IACH,IAAI,CAACC,aAAa,GAAGf,KAAK,CAACgB,MAAM,CAAC;MAC9BC,OAAO,EAAE;QAAE,gBAAgB,EAAE;MAAmB;IACpD,CAAC,CAAC;EACN;AACF;AAGAJ,MAAM,CAACK,SAAS,CAACC,SAAS,GAAG,UAAUC,MAAM,EAAE;EAC7C,IAAI,CAACA,MAAM,GAAGA,MAAM;EACpB,IAAI,CAACL,aAAa,CAACM,QAAQ,CAACJ,OAAO,CAACK,MAAM,CAAC,SAAS,CAAC,GAAGF,MAAM;AAChE,CAAC;AAED,SAASG,WAAWA,CAACC,UAAU,EAAE;EAC/B,OAAOtB,UAAU,GAAG,OAAO,GAAGsB,UAAU;AAC1C;AAEAX,MAAM,CAACK,SAAS,CAACO,eAAe,GAAG,eAAeC,OAAOA,CAACF,UAAU,EAAEG,aAAa,EAAE;EACjF,MAAMC,IAAI,GAAG,IAAInB,QAAQ,CAAC,CAAC;EAC3B,KAAK,IAAIoB,GAAG,IAAIC,MAAM,CAACC,IAAI,CAACJ,aAAa,CAAC,EAAE;IACxC,MAAMK,KAAK,GAAGL,aAAa,CAACE,GAAG,CAAC;IAChC,IAAI,CAACG,KAAK,EAAE;IAEZ,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAC3BJ,IAAI,CAACK,MAAM,CAACJ,GAAG,EAAEG,KAAK,CAAC;IAC3B,CAAC,MAAM,IAAI3B,YAAY,IAAI2B,KAAK,YAAYzB,YAAY,CAAC2B,OAAO,EAAE;MAC9D,IAAIF,KAAK,CAACG,OAAO,KAAK,KAAK,EAAE;QACzB,IAAIH,KAAK,CAACI,GAAG,EAAE;UACXR,IAAI,CAACK,MAAM,CAACJ,GAAG,EAAEG,KAAK,CAACI,GAAG,CAAC;UAC3B;QACJ,CAAC,MAAM;UACH,MAAM,IAAIC,KAAK,CAAE,2CAA0CR,GAAI,EAAC,CAAC;QACrE;MACJ,CAAC,MAAM,IAAIG,KAAK,CAACG,OAAO,KAAK,OAAO,IAAIH,KAAK,CAACM,KAAK,EAAE;QACjD,IAAIN,KAAK,CAACM,KAAK,CAACC,MAAM,GAAG,CAAC,EAAE;UACxBX,IAAI,CAACK,MAAM,CAACJ,GAAG,EAAEG,KAAK,CAACM,KAAK,CAAC,CAAC,CAAC,EAAE,WAAW,CAAC;QACjD,CAAC,MAAM;UACH,MAAM,IAAID,KAAK,CAAE,iDAAgDR,GAAI,EAAC,CAAC;QAC3E;MACJ,CAAC,MAAM;QACH,MAAM,IAAIQ,KAAK,CAAE,2CAA0CR,GAAI,EAAC,CAAC;MACrE;IACJ,CAAC,MAAM,IAAIG,KAAK,CAACQ,cAAc,CAAC,IAAI,CAAC,EAAE;MACnCZ,IAAI,CAACK,MAAM,CAACJ,GAAG,EAAEG,KAAK,CAAC;IAC3B,CAAC,MAAM,IAAIzB,YAAY,CAACkC,MAAM,IAAIlC,YAAY,CAACkC,MAAM,CAACC,QAAQ,CAACV,KAAK,CAAC,EAAE;MACnEJ,IAAI,CAACK,MAAM,CAACJ,GAAG,EAAEG,KAAK,EAAE,WAAW,CAAC;IACxC,CAAC,MAAM;MACH,MAAM,IAAIK,KAAK,CAAE,6CAA4CR,GAAI,EAAC,CAAC;IACvE;IACA;EACJ;;EAIF,IAAIc,WAAW,GAAG;IAChBC,eAAe,EAAE;EACnB,CAAC;EACD,IAAIhB,IAAI,CAACiB,UAAU,KAAKC,SAAS,EAAE;IACjC;IACAH,WAAW,CAAC1B,OAAO,GAAGW,IAAI,CAACiB,UAAU,CAAC,CAAC;EACzC;EACA,MAAME,QAAQ,GAAG,MAAM,IAAI,CAAChC,aAAa,CAACiC,IAAI,CAC5CzB,WAAW,CAACC,UAAU,CAAC,EACvBI,IAAI,EACJe,WACF,CAAC;EACD,OAAOI,QAAQ,CAACE,IAAI;AACtB,CAAC;AAEDpC,MAAM,CAACK,SAAS,CAACgC,uBAAuB,GACtC9C,eAAe,CAAC8C,uBAAuB;AACzCrC,MAAM,CAACK,SAAS,CAACiC,gCAAgC,GAC/C/C,eAAe,CAAC+C,gCAAgC;AAElDC,MAAM,CAACC,OAAO,GAAGxC,MAAM"},"metadata":{},"sourceType":"script","externalDependencies":[]}